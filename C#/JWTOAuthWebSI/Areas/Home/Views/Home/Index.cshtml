@{
    ViewBag.Title = "测试JWT授权方式";
}
<style type="text/css">
    .form-group-lable { text-align: right; float: left; width: 100px; padding: 6px 12px; }
</style>
<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
    <div class="panel panel-default">
        <div class="panel-heading" role="tab" id="heading1">
            <h4 class="panel-title">
                <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapse1" aria-expanded="true" aria-controls="collapse1">
                    1.用户密码模式(UserPassword)
                </a>
            </h4>
        </div>
        <div id="collapse1" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading1">
            <div class="panel-body">
                <p>第一步:</p>
                <form id="AuthCode01" action="/jwtoauth2token" method="post" class="form-horizontal col-xs-12">
                    <div class="form-group">
                        <label class="form-group-lable" for="grant_type">用户名:</label>
                        <input type="text" id="userName" name="userName" class="form-control" readonly value="admin" />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable" for="client_id">客户端密码:</label>
                        <input type="password" id="password" name="password" class="form-control" value="admin" />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable"></label>
                        <button type="button" id="GetAuthCode01" class="btn btn-primary">GetToken</button>
                    </div>
                </form>
                <p>第三步:</p>
                <form id="AuthCode03" action="/Api/TestOAuth/GetValue" class="form-horizontal" method="post">
                    <div class="form-group">
                        <label class="form-group-lable" for="token_type">授权码类型:</label>
                        <input type="text" id="token_type" name="token_type" class="form-control" value="Bearer" readonly />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable" for="">访问授权码:</label>
                        <input type="text" id="access_token" class="form-control" value="" readonly data-toggle="tooltip" data-placement="top" title="第二步返回值" placeholder="第二步返回值" />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable" for="">刷新授权码:</label>
                        <input type="text" id="refresh_token" class="form-control" value="" readonly data-toggle="tooltip" data-placement="top" title="第二步返回值" placeholder="第二步返回值" />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable" for="grant_type">授权类型:</label>
                        <input type="text" id="grant_type" name="grant_type" class="form-control" value="refresh_token" readonly />
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable"></label>
                        <button type="button" id="GetAuthCode03" class="btn btn-primary" disabled>GetValue</button>
                        &nbsp;
                        <button type="button" id="GetAuthCode04" class="btn btn-primary" data-access-url="/testauthcodetoken" disabled><span class="glyphicon glyphicon-refresh"></span> RefreshToken</button>
                    </div>
                    <div class="form-group">
                        <label class="form-group-lable" for="token_type">获取数据:</label>
                        <input type="text" id="getvalue" class="form-control" value="" readonly />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@section CustomScript{
    <script type="text/javascript">
        $(function () {
            $("[data-toggle='tooltip']").tooltip();
            $('#AuthCode01 #redirect_uri').val('http://' + location.host + $('#AuthCode01 #redirect_uri').val());
            $('#AuthCode02 #redirect_uri').val('http://' + location.host + $('#AuthCode02 #redirect_uri').val());
            AuthCode02Timer = window.setTimeout(function () { }, 1000);
            $('#GetAuthCode01').on('click', function () {
                var formEle = $('#AuthCode01');
                var postUrl = formEle.attr('action');
                var postData = formEle.serialize();
                $.ajax({
                    type: "POST",
                    url: postUrl,
                    data: postData,
                    success: function (data) {
                        $('#AuthCode03 #access_token').val(data.access_token);
                        $('#AuthCode03 #refresh_token').val(data.refresh_token);
                        window.clearTimeout(AuthCode02Timer);
                        AuthCode02Timer = window.setTimeout(function () {
                            $('#GetAuthCode02').attr('disabled', true);
                            $('#GetAuthCode03').attr('disabled', true);
                        }, data.expires_in * 1000);
                        $('#GetAuthCode02').attr('disabled', true);
                        $('#GetAuthCode03').removeAttr('disabled');
                        $('#GetAuthCode04').removeAttr('disabled');
                    },
                    error: function (data) {
                        $('#AuthCode03 #access_token').val(data.responseText + '');
                        $('#AuthCode03 #refresh_token').val('{ status: ' + data.status + ', statusText: ' + data.statusText + ' }');
                        $('#GetAuthCode02').attr('disabled', true);
                        $('#GetAuthCode03').attr('disabled', true);
                        $('#GetAuthCode04').attr('disabled', true);
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", 'Basic ' + new Base64().encode($('#AuthCode01 #userName').val() + ':' + $('#AuthCode01 #password').val()));
                    }
                });
            });
            $('#GetAuthCode03').on('click', function () {
                var formEle = $('#AuthCode03');
                var postUrl = formEle.attr('action');
                $.ajax({
                    type: "GET",
                    url: postUrl,
                    success: function (data) {
                        $('#AuthCode03 #getvalue').val(data);
                    },
                    error: function (data) {
                        $('#AuthCode03 #getvalue').val(data.responseText + '');
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", 'Bearer ' + $('#AuthCode03 #access_token').val());
                    }
                });
            });
            $('#GetAuthCode04').on('click', function () {
                var postUrl = $(this).attr('data-access-url');
                var postData = { grant_type: $('#AuthCode03 #grant_type').val(), refresh_token: $('#AuthCode03 #refresh_token').val() };
                $.ajax({
                    type: "POST",
                    url: postUrl,
                    data: postData,
                    success: function (data) {
                        $('#AuthCode03 #access_token').val(data.access_token);
                        $('#AuthCode03 #refresh_token').val(data.refresh_token);
                        window.clearTimeout(AuthCode02Timer);
                        AuthCode02Timer = window.setTimeout(function () {
                            $('#GetAuthCode03').attr('disabled', true);
                        }, data.expires_in * 1000);
                        $('#GetAuthCode03').removeAttr('disabled');
                    },
                    error: function (data) {
                        $('#AuthCode03 #access_token').val(data.responseText + '');
                        $('#AuthCode03 #refresh_token').val('{ status: ' + data.status + ', statusText: ' + data.statusText + ' }');
                        $('#GetAuthCode02').attr('disabled', true);
                        $('#GetAuthCode03').attr('disabled', true);
                        $('#GetAuthCode04').attr('disabled', true);
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", 'Basic ' + new Base64().encode($('#AuthCode02 #clientId').val() + ':' + $('#AuthCode02 #clientSecret').val()));
                    }
                });
            });
        });
    </script>
    <script type="text/javascript">
        function Base64() {
            // private property
            _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            // public method for encoding
            this.encode = function (input) {
                var output = "";
                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                var i = 0;
                input = _utf8_encode(input);
                while (i < input.length) {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);
                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;
                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }
                    output = output +
                        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
                }
                return output;
            }
            // public method for decoding
            this.decode = function (input) {
                var output = "";
                var chr1, chr2, chr3;
                var enc1, enc2, enc3, enc4;
                var i = 0;
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                while (i < input.length) {
                    enc1 = _keyStr.indexOf(input.charAt(i++));
                    enc2 = _keyStr.indexOf(input.charAt(i++));
                    enc3 = _keyStr.indexOf(input.charAt(i++));
                    enc4 = _keyStr.indexOf(input.charAt(i++));
                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;
                    output = output + String.fromCharCode(chr1);
                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }
                }
                output = _utf8_decode(output);
                return output;
            }
            // private method for UTF-8 encoding
            _utf8_encode = function (string) {
                string = string.replace(/\r\n/g, "\n");
                var utftext = "";
                for (var n = 0; n < string.length; n++) {
                    var c = string.charCodeAt(n);
                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    } else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    } else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }

                }
                return utftext;
            }
            // private method for UTF-8 decoding
            _utf8_decode = function (utftext) {
                var string = "";
                var i = 0;
                var c = c1 = c2 = 0;
                while (i < utftext.length) {
                    c = utftext.charCodeAt(i);
                    if (c < 128) {
                        string += String.fromCharCode(c);
                        i++;
                    } else if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2;
                    } else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3;
                    }
                }
                return string;
            }
        }
    </script>
}
